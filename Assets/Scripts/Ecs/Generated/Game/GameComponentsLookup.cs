//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class GameComponentsLookup
{
	public const int Destroyed = 0;
	public const int Link = 1;
	public const int Uid = 2;
	public const int TestCounter = 3;
	public const int TestFloat = 4;
	public const int TestUnique = 5;
	public const int GameDestroyedAddedListener = 6;
	public const int LinkRemovedListener = 7;
	public const int TestCounterAddedListener = 8;
	public const int TestCounterRemovedListener = 9;
	public const int TestFloatAddedListener = 10;

	public const int TotalComponents = 11;

	public static readonly string[] ComponentNames =
	{
		"Destroyed",
		"Link",
		"Uid",
		"TestCounter",
		"TestFloat",
		"TestUnique",
		"GameDestroyedAddedListener",
		"LinkRemovedListener",
		"TestCounterAddedListener",
		"TestCounterRemovedListener",
		"TestFloatAddedListener"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(Ecs.Common.Components.DestroyedComponent),
		typeof(Ecs.Common.Components.LinkComponent),
		typeof(Ecs.Common.Components.UidComponent),
		typeof(Ecs.Game.Components.TestCounterComponent),
		typeof(Ecs.Game.Components.TestFloatComponent),
		typeof(Ecs.Game.Components.TestUniqueComponent),
		typeof(GameDestroyedAddedListenerComponent),
		typeof(LinkRemovedListenerComponent),
		typeof(TestCounterAddedListenerComponent),
		typeof(TestCounterRemovedListenerComponent),
		typeof(TestFloatAddedListenerComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(Ecs.Common.Components.DestroyedComponent), 0 },
		{ typeof(Ecs.Common.Components.LinkComponent), 1 },
		{ typeof(Ecs.Common.Components.UidComponent), 2 },
		{ typeof(Ecs.Game.Components.TestCounterComponent), 3 },
		{ typeof(Ecs.Game.Components.TestFloatComponent), 4 },
		{ typeof(Ecs.Game.Components.TestUniqueComponent), 5 },
		{ typeof(GameDestroyedAddedListenerComponent), 6 },
		{ typeof(LinkRemovedListenerComponent), 7 },
		{ typeof(TestCounterAddedListenerComponent), 8 },
		{ typeof(TestCounterRemovedListenerComponent), 9 },
		{ typeof(TestFloatAddedListenerComponent), 10 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
